provider "aws" {
  region = "us-east-1"
}

# 🔑 Generate Key Pair
resource "aws_key_pair" "app_key" {
  key_name   = "movie_booking_key"
  public_key = "YOUR_SSH_PUBLIC_KEY_HERE"
}

# 🚀 Create VPC
resource "aws_vpc" "movie_booking_vpc" {
  cidr_block = "10.0.0.0/16"
}

# 🌎 Public Subnets
resource "aws_subnet" "public_subnet_az1" {
  vpc_id                  = aws_vpc.movie_booking_vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1a"
}

resource "aws_subnet" "public_subnet_az2" {
  vpc_id                  = aws_vpc.movie_booking_vpc.id
  cidr_block              = "10.0.3.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1b"
}

# 🔒 Private Subnets
resource "aws_subnet" "private_subnet_az1" {
  vpc_id            = aws_vpc.movie_booking_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "private_subnet_az2" {
  vpc_id            = aws_vpc.movie_booking_vpc.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "us-east-1b"
}

# 🌐 Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.movie_booking_vpc.id
}

# 📌 Public Route Table
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.movie_booking_vpc.id
}

resource "aws_route" "public_internet_route" {
  route_table_id         = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}

resource "aws_route_table_association" "public_subnet_az1_assoc" {
  subnet_id      = aws_subnet.public_subnet_az1.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_subnet_az2_assoc" {
  subnet_id      = aws_subnet.public_subnet_az2.id
  route_table_id = aws_route_table.public_rt.id
}

# 🛑 NAT Gateway for Private EC2 Internet Access
resource "aws_eip" "nat_eip" {}

resource "aws_nat_gateway" "nat_gw" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet_az1.id
}

# 🚀 Private Route Table
resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.movie_booking_vpc.id
}

resource "aws_route" "private_nat_route" {
  route_table_id         = aws_route_table.private_rt.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat_gw.id
}

resource "aws_route_table_association" "private_subnet_az1_assoc" {
  subnet_id      = aws_subnet.private_subnet_az1.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "private_subnet_az2_assoc" {
  subnet_id      = aws_subnet.private_subnet_az2.id
  route_table_id = aws_route_table.private_rt.id
}

# 🔒 Security Groups
resource "aws_security_group" "app_sg" {
  vpc_id = aws_vpc.movie_booking_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.bastion_sg.id] # Only bastion can SSH
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "bastion_sg" {
  vpc_id = aws_vpc.movie_booking_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# 🖥️ Bastion Host (Public Subnet)
resource "aws_instance" "bastion_host" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public_subnet_az1.id
  security_groups = [aws_security_group.bastion_sg.name]
  key_name       = aws_key_pair.app_key.key_name

  tags = {
    Name = "BastionHost"
  }
}

# 🏢 Private Application Servers
resource "aws_instance" "app_server_az1" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private_subnet_az1.id
  security_groups = [aws_security_group.app_sg.name]
  key_name       = aws_key_pair.app_key.key_name

  tags = {
    Name = "MovieBookingApp-AZ1"
  }
}

resource "aws_instance" "app_server_az2" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private_subnet_az2.id
  security_groups = [aws_security_group.app_sg.name]
  key_name       = aws_key_pair.app_key.key_name

  tags = {
    Name = "MovieBookingApp-AZ2"
  }
}

# 📦 S3 Storage
resource "aws_s3_bucket" "app_bucket" {
  bucket = "movie-booking-assets"
}

resource "aws_s3_bucket_acl" "app_bucket_acl" {
  bucket = aws_s3_bucket.app_bucket.id
  acl    = "private"
}

# 🎯 Load Balancer + Target Group
resource "aws_lb" "app_lb" {
  name               = "movie-booking-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.app_sg.id]
  subnets           = [aws_subnet.public_subnet_az1.id, aws_subnet.public_subnet_az2.id]
}

resource "aws_lb_target_group" "app_tg" {
  name     = "app-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.movie_booking_vpc.id
}

resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app_tg.arn
  }
}
